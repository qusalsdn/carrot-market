// prisma init 명령어로 prisma 기본 파일들 생성
// pscale database create (db이름) --region (지역이름) 명령어로 db를 생성할 수 있다.
// pscale conntect (db이름) 명령어는 secure tunnel을 통해 PlanetScale과 연결해준다. 그러면 url을 주는데 이 url을 env 파일에 넣어주면 된다.
// npx prisma db push 명령어를 통해 db를 planetscale에 push 할 수 있다.
// npx prisma generate 명령어를 터미널에 입력하면 프리스마가 스키마를 확인해서 타입스크립트로 타입을 만들어준다.
// Vitess는 foreugn key constraunt(제약)을 지원하지 않는다.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // relationMode는 다른 객체에 연결될 때 그 객체가 존재하길 바란다는 뜻이다.
  relationMode = "prisma"
}

model User {
  // @default(autoincrement())을 추가하면 인덱스가 추가될 때마다 자동으로 증가한다.
  id         Int         @id @default(autoincrement())
  phone      String?     @unique
  email      String?     @unique
  name       String
  avatar     String?
  // now 함수는 새 유저가 만들어 질 때 그 시점의 날짜를 가져와준다.
  createdAt  DateTime    @default(now())
  // @updatedAt은 유저가 업데이트 될 때마다 해당 field가 변한다.
  updatedAt  DateTime    @updatedAt
  tokens     Token[]
  products   Product[]
  fav        Fav[]
  posts      Post[]
  answers    Answer[]
  wonderings Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade로 설정하면 User(부모)가 삭제될 때 Token도 같이 삭제된다.
  // 아래의 userId는 User 모델의 id이다.
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model -> 데이터베이스 -> mutation -> useSWR로 데이터 가져오기 형식으로 진행한다.
model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  favs        Fav[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  postId    Int
  answer    String   @db.MediumText
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  postId    Int
}
